// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 20.1 (Build Build 711 06/05/2020)
// Created on Tue Jan 23 19:40:07 2024

mux5to1 mux5to1_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.rst_n(rst_n_sig) ,	// input  rst_n_sig
	.empty_tc(empty_tc_sig) ,	// input  empty_tc_sig
	.tx_done_tc(tx_done_tc_sig) ,	// input  tx_done_tc_sig
	.valid_tc(valid_tc_sig) ,	// input  valid_tc_sig
	.din_tc(din_tc_sig) ,	// input [7:0] din_tc_sig
	.ren_tc(ren_tc_sig) ,	// output  ren_tc_sig
	.empty_hk(empty_hk_sig) ,	// input  empty_hk_sig
	.tx_done_hk(tx_done_hk_sig) ,	// input  tx_done_hk_sig
	.valid_hk(valid_hk_sig) ,	// input  valid_hk_sig
	.din_hk(din_hk_sig) ,	// input [7:0] din_hk_sig
	.ren_hk(ren_hk_sig) ,	// output  ren_hk_sig
	.empty_sd(empty_sd_sig) ,	// input  empty_sd_sig
	.tx_done_sd(tx_done_sd_sig) ,	// input  tx_done_sd_sig
	.valid_sd(valid_sd_sig) ,	// input  valid_sd_sig
	.din_sd(din_sd_sig) ,	// input [7:0] din_sd_sig
	.ren_sd(ren_sd_sig) ,	// output  ren_sd_sig
	.empty_di(empty_di_sig) ,	// input  empty_di_sig
	.tx_done_di(tx_done_di_sig) ,	// input  tx_done_di_sig
	.valid_di(valid_di_sig) ,	// input  valid_di_sig
	.din_di(din_di_sig) ,	// input [7:0] din_di_sig
	.ren_di(ren_di_sig) ,	// output  ren_di_sig
	.empty_pf(empty_pf_sig) ,	// input  empty_pf_sig
	.tx_done_pf(tx_done_pf_sig) ,	// input  tx_done_pf_sig
	.valid_pf(valid_pf_sig) ,	// input  valid_pf_sig
	.din_pf(din_pf_sig) ,	// input [7:0] din_pf_sig
	.ren_pf(ren_pf_sig) ,	// output  ren_pf_sig
	.empty(empty_sig) ,	// output  empty_sig
	.tx_done(tx_done_sig) ,	// output  tx_done_sig
	.ren(ren_sig) ,	// input  ren_sig
	.valid(valid_sig) ,	// output  valid_sig
	.dout(dout_sig) 	// output [7:0] dout_sig
);

