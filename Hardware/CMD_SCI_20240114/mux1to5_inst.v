// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.


// Generated by Quartus Prime Version 20.1 (Build Build 711 06/05/2020)
// Created on Tue Jan 23 18:28:31 2024

mux1to5 mux1to5_inst
(
	.cmd(cmd_sig) ,	// input [4:0] cmd_sig
	.wen(wen_sig) ,	// input  wen_sig
	.din(din_sig) ,	// input [7:0] din_sig
	.full(full_sig) ,	// output  full_sig
	.rx_done(rx_done_sig) ,	// output  rx_done_sig
	.full_tc(full_tc_sig) ,	// input  full_tc_sig
	.rx_done_tc(rx_done_tc_sig) ,	// input  rx_done_tc_sig
	.valid_tc(valid_tc_sig) ,	// output  valid_tc_sig
	.dout_tc(dout_tc_sig) ,	// output [7:0] dout_tc_sig
	.full_hk(full_hk_sig) ,	// input  full_hk_sig
	.rx_done_hk(rx_done_hk_sig) ,	// input  rx_done_hk_sig
	.valid_hk(valid_hk_sig) ,	// output  valid_hk_sig
	.dout_hk(dout_hk_sig) ,	// output [7:0] dout_hk_sig
	.full_sd(full_sd_sig) ,	// input  full_sd_sig
	.rx_done_sd(rx_done_sd_sig) ,	// input  rx_done_sd_sig
	.valid_sd(valid_sd_sig) ,	// output  valid_sd_sig
	.dout_sd(dout_sd_sig) ,	// output [7:0] dout_sd_sig
	.full_di(full_di_sig) ,	// input  full_di_sig
	.rx_done_di(rx_done_di_sig) ,	// input  rx_done_di_sig
	.valid_di(valid_di_sig) ,	// output  valid_di_sig
	.dout_di(dout_di_sig) ,	// output [7:0] dout_di_sig
	.full_pf(full_pf_sig) ,	// input  full_pf_sig
	.rx_done_pf(rx_done_pf_sig) ,	// input  rx_done_pf_sig
	.valid_pf(valid_pf_sig) ,	// output  valid_pf_sig
	.dout_pf(dout_pf_sig) 	// output [7:0] dout_pf_sig
);

